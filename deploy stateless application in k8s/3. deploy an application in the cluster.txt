deploy an application in the cluster

With a Kubernetes cluster up and running, you can deploy an application in the cluster. You will use a Docker image of a game for the application. The application runs in a client web browser and doesn't store any state across sessions. The deployment you will perform in this Lab Step is effective for such stateless applications. 




In your SSH session on the ca-lab-vm control plane node, enter the following command to create a deployment resource file:

Copy code
cat <<EOF > deployment.yml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: game-deployment
spec:
  # tells deployment to run 1 pods matching the template
  replicas: 1
  # create pods using the pod definition in this template
  template: 
    metadata:
      # name is automatically generated based on the deployment.name
      labels:
        app: game
    spec:
      containers:
      - name: tetris
        image: lrakai/tetris:latest
        ports:
        - containerPort: 80
EOF

The deployment declares a single replica and specifies a single Docker container. The container image is hosted on Docker Hub.



Create the deployment resource specified in the deployment.yml file:

$ kubectl create -f deployment.yml


Get the deployment resource:

$ kubectl get deployment game-deployment

[student@ca-lab-vm ~]$ kubectl get deployment game-deployment
NAME              DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
game-deployment   1         1         1            0           15s


The DESIRED column shows how many replicas are desired. The CURRENT column shows how many pod replicas are currently running. Both values are 1:



[student@ca-lab-vm ~]$ kubectl describe deployment game-deployment
Name:     game-deployment
Namespace:    default
CreationTimestamp:  Tue, 07 Jun 2022 17:54:11 +0000
Labels:     app=game
Selector:   app=game
Replicas:   1 updated | 1 total | 0 available | 1 unavailable
StrategyType:   RollingUpdate
MinReadySeconds:  0
RollingUpdateStrategy:  1 max unavailable, 1 max surge
Conditions:
  Type    Status  Reason
  ----    ------  ------
  Available   True  MinimumReplicasAvailable
OldReplicaSets: <none>
NewReplicaSet:  game-deployment-581287808 (1/1 replicas created)
Events:
  FirstSeen LastSeen  Count From        SubObjectPath Type    Reason      Message
  --------- --------  ----- ----        ------------- --------  ------      -------
  29s   29s   1 {deployment-controller }    Normal    ScalingReplicaSet Scaled up replica set game-deployment-581287808 to 1


In the event of failed deployments, you can use this command to understand the reason the deployment failed. Under the Conditions section, only the Available condition is present:

It has a Status of True because the minimum number of replicas for the deployment are available. There would be other conditions if the deployment failed.


[student@ca-lab-vm ~]$ kubectl get events | more
LASTSEEN   FIRSTSEEN   COUNT     NAME                              KIND         SUBOBJECT                 TYPE      REASON                    SOURCE                     MESSAGE
1m         1m          1         game-deployment-581287808-19srx   Pod                                    Normal    Scheduled                 {default-scheduler }       Successfully assigned game-deployment-581287808-19srx to k8s-node
1m         1m          2         game-deployment-581287808-19srx   Pod                                    Warning   MissingClusterDNS         {kubelet k8s-node}         kubelet does not have ClusterDNS IP configured and cannot create Pod using "ClusterFirst" policy. Fa
lling back to DNSDefault policy.
1m         1m          1         game-deployment-581287808-19srx   Pod          spec.containers{tetris}   Normal    Pulling                   {kubelet k8s-node}         pulling image "lrakai/tetris:latest"
1m         1m          1         game-deployment-581287808-19srx   Pod          spec.containers{tetris}   Normal    Pulled                    {kubelet k8s-node}         Successfully pulled image "lrakai/tetris:latest"
1m         1m          1         game-deployment-581287808-19srx   Pod          spec.containers{tetris}   Normal    Created                   {kubelet k8s-node}         Created container with docker id a0cb36fdd4ea; Security:[seccomp=unconfined]
59s        59s         1         game-deployment-581287808-19srx   Pod          spec.containers{tetris}   Normal    Started                   {kubelet k8s-node}         Started container with docker id a0cb36fdd4ea
1m         1m          1         game-deployment-581287808         ReplicaSet                             Normal    SuccessfulCreate          {replicaset-controller }   Created pod: game-deployment-581287808-19srx
1m         1m          1         game-deployment                   Deployment                             Normal    ScalingReplicaSet         {deployment-controller }   Scaled up replica set game-deployment-581287808 to 1
23m        23m         1         k8s-node                          Node                                   Normal    RegisteredNode            {controllermanager }       Node k8s-node event: Registered Node k8s-node in NodeController
5m         5m          1         k8s-node                          Node                                   Normal    Starting                  {kube-proxy k8s-node}      Starting kube-proxy.
5m         5m          1         k8s-node                          Node                                   Normal    Starting                  {kubelet k8s-node}         Starting kubelet.
5m         5m          1         k8s-node                          Node                                   Warning   ImageGCFailed             {kubelet k8s-node}         unable to find data for container /
5m         5m          2         k8s-node                          Node                                   Normal    NodeHasSufficientDisk     {kubelet k8s-node}         Node k8s-node status is now: NodeHasSufficientDisk
5m         5m          2         k8s-node                          Node                                   Normal    NodeHasSufficientMemory   {kubelet k8s-node}         Node k8s-node status is now: NodeHasSufficientMemory
5m         5m          2         k8s-node                          Node                                   Normal    NodeHasNoDiskPressure     {kubelet k8s-node}         Node k8s-node status is now: NodeHasNoDiskPressure
5m         5m          1         k8s-node                          Node                                   Normal    NodeNotReady              {kubelet k8s-node}         Node k8s-node status is now: NodeNotReady
5m         5m          1         k8s-node                          Node                                   Normal    NodeReady                 {kubelet k8s-node}         Node k8s-node status is now: NodeReady
1m         1m          2         k8s-node                          Node                                   Warning   MissingClusterDNS         {kubelet k8s-node}         kubelet does not have ClusterDNS IP configured and cannot create Pod using "ClusterFirst" policy. po
d: "game-deployment-581287808-19srx_default(d6031361-e68a-11ec-8e87-000d3a751d23)". Falling back to DNSDefault policy.


Get the pod resource created by the deployment:

[student@ca-lab-vm ~]$ kubectl get pods
NAME                              READY     STATUS    RESTARTS   AGE
game-deployment-581287808-19srx   1/1       Running   0          1m


Describe the pod that is running the container in the deployment

[student@ca-lab-vm ~]$ kubectl describe pods | more
Name:   game-deployment-581287808-19srx
Namespace:  default
Node:   k8s-node/10.0.0.10
Start Time: Tue, 07 Jun 2022 17:54:11 +0000
Labels:   app=game
    pod-template-hash=581287808
Status:   Running
IP:   172.17.0.2
Controllers:  ReplicaSet/game-deployment-581287808
Containers:
  tetris:
    Container ID: docker://a0cb36fdd4eae53ce03aa57798af642131e708ff24d59c0234a1a6fa4df34401
    Image:    lrakai/tetris:latest
    Image ID:   docker-pullable://docker.io/lrakai/tetris@sha256:b7714094b7b7a88144b5355d763f39054302ce7ae6f000e8dec312dd1c69c64d
    Port:   80/TCP
    State:    Running
      Started:    Tue, 07 Jun 2022 17:54:44 +0000
    Ready:    True
    Restart Count:  0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-gf9mj (ro)
    Environment Variables:  <none>
Conditions:
  Type    Status
  Initialized   True 
  Ready   True 
  PodScheduled  True 
Volumes:
  default-token-gf9mj:
    Type: Secret (a volume populated by a Secret)
    SecretName: default-token-gf9mj
QoS Class:  BestEffort
Tolerations:  <none>
Events:
  FirstSeen LastSeen  Count From      SubObjectPath   Type    Reason      Message
  --------- --------  ----- ----      -------------   --------  ------      -------
  2m    2m    1 {default-scheduler }        Normal    Scheduled   Successfully assigned game-deployment-581287808-19srx to k8s-node
  1m    1m    1 {kubelet k8s-node}  spec.containers{tetris} Normal    Pulling     pulling image "lrakai/tetris:latest"
  1m    1m    2 {kubelet k8s-node}        Warning   MissingClusterDNS kubelet does not have ClusterDNS IP configured and cannot create Pod using "ClusterFirst" policy. Falling back to DNSDefault policy.
  1m    1m    1 {kubelet k8s-node}  spec.containers{tetris} Normal    Pulled      Successfully pulled image "lrakai/tetris:latest"
  1m    1m    1 {kubelet k8s-node}  spec.containers{tetris} Normal    Created     Created container with docker id a0cb36fdd4ea; Security:[seccomp=unconfined]
  1m    1m    1 {kubelet k8s-node}  spec.containers{tetris} Normal    Started     Started container with docker id a0cb36fdd4ea

You can see a variety of details including Containers, and Events for the pod. You can append a specific pod name to the end of the command to describe a specific pod. In this case, there is only one pod, so there is no need to specify the name.

Describe all the pods with the label app=game: 

[student@ca-lab-vm ~]$ kubectl get pods -l app=game
NAME                              READY     STATUS    RESTARTS   AGE
game-deployment-581287808-19srx   1/1       Running   0          2m



Create a service resource file:

cat <<EOF > service.yml
apiVersion: v1
kind: Service
metadata:
  name: game
  labels:
    app: game
spec:
  selector:
    # Use labels to select the pods to route traffic to
    app: game
  ports:
  - protocol: TCP
    port: 80
  # Allocate a port on each node in the cluster
  type: NodePort
EOF


A service is required to access the application from outside of the cluster.

Create the service:

$kubectl create -f service.yml



Describe the service and record what NodePort was allocated:

$ kubectl describe services game

 [student@ca-lab-vm ~]$ kubectl describe services game
Name:     game
Namespace:    default
Labels:     app=game
Selector:   app=game
Type:     NodePort
IP:     10.254.199.86
Port:     <unset> 80/TCP
NodePort:   <unset> 30393/TCP
Endpoints:    172.17.0.2:80
Session Affinity: None
No events.

IP:     10.254.199.86
The IP value is a virtual IP within a range of addresses reserved for services.



Return to the k8s-node SSH session and enter curl ipinfo.io/ip to get the worker node's public IP address.

[student@k8s-node ~]$ curl ipinfo.io/ip
40.124.48.105

Disable the operating system firewall to allow external connections:

$ sudo systemctl stop firewalld

Again, this is only for Lab demonstration purposes. You would only allow the required traffic through the operating system firewall in production. The Azure network security group has been configured to allow traffic on the game port already.

http://40.124.48.105:30393/



Return to the ca-lab-vm control plane node SSH session, and scale the application by changing the deployment replicas count to 2:

$ sed -i 's/\(replicas: \).*/\12/' deployment.yml


Apply the new resource:

$ kubectl apply -f deployment.yml

Verify that the number of pods increases to 2:

$ kubectl get pods -l app=game
[student@ca-lab-vm ~]$ kubectl get pods -l app=game
NAME                              READY     STATUS    RESTARTS   AGE
game-deployment-581287808-0gqlk   1/1       Running   0          8s
game-deployment-581287808-19srx   1/1       Running   0          7m
